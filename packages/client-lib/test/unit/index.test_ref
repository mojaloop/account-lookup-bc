/**
 License
 --------------
 Copyright © 2021 Mojaloop Foundation

 The Mojaloop files are made available by the Mojaloop Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License.

 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

 Contributors
 --------------
 This is the official list (alphabetical ordering) of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.

 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Coil
 - Jason Bruwer <jason.bruwer@coil.com>

 * Crosslake
 - Pedro Sousa Barreto <pedrob@crosslaketech.com>

 * Gonçalo Garcia <goncalogarcia99@gmail.com>

 * Arg Software
 - José Antunes <jose.antunes@arg.software>
 - Rui Rocha <rui.rocha@arg.software>

 --------------
 **/

"use strict";

import { AccountLookupHttpClient } from "../../src";
import { ILogger, ConsoleLogger, LogLevel } from "@mojaloop/logging-bc-public-types-lib";
import { AuthenticatedHttpRequester, IAuthenticatedHttpRequester } from "@mojaloop/security-bc-client-lib";
import { HttpAccountLookupServiceMock } from "../mocks/http_account_lookup_service_mock";
import nock from "nock";

const logger: ILogger = new ConsoleLogger();
logger.setLogLevel(LogLevel.FATAL);

let accountLookupServiceMock: HttpAccountLookupServiceMock;
let accountLookupClient: AccountLookupHttpClient;
let authRequester: IAuthenticatedHttpRequester;

const BASE_URL = "http://localhost:3301";
const TOKEN_URL = "http://localhost:3302/token";
const USERNAME = "user";
const PASSWORD = "superPass";
const CLIENT_ID = "security-bc-ui";
const CLIENT_SECRET = "client_secret";

//TODO: need to replace nock, since it is not working with fetch
// https://github.com/nock/nock/issues/2397
// Maybe replace it with msw?
describe("Client - Account Lookup Client Unit tests", () => {
  beforeAll(async () => {
    authRequester = new MemoryAuthRequester(logger, TOKEN_URL);
    authRequester.setUserCredentials(CLIENT_ID, USERNAME, PASSWORD);
    authRequester.setAppCredentials(CLIENT_ID, CLIENT_SECRET);
    accountLookupClient = new AccountLookupHttpClient(logger, BASE_URL, authRequester, 1000);
  });

  afterAll(async () => {
    jest.clearAllMocks();
  });

  test("GET - participantLookUp - should throw error if endpoint is not found", async () => {
    // Arrange
    const partyId = "error";
    const partyType = "error";
    const currency = "error";

    // Act
    const result = accountLookupClient.participantLookUp(partyId, partyType, currency);

    // Assert
    await expect(result).rejects.toThrowError();
  });

  test("GET - participantLookUp - should be able to get individual fspId using partyId and partyType", async () => {
    // Act
    const result = await accountLookupClient.participantLookUp(PARTY_ID, PARTY_TYPE, null);

    // Assert
    expect(result).toEqual(FSP_ID);
  });

  test("GET - participantLookUp - should be able to get individual fspId using partyId and partyType and currency", async () => {
    // Act
    const result = await accountLookupClient.participantLookUp(PARTY_ID, PARTY_TYPE, "EUR");

    // Assert
    expect(result).toEqual(FSP_ID_WITH_CURRENCY_EUR);
  });
});
